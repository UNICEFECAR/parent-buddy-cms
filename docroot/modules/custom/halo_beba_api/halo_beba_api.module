<?php

/**
 * @file
 * Contains halo_beba_api.module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\file\FileInterface;
use Drupal\image\Entity\ImageStyle;
use Drupal\webform\Entity\Webform;

define('HALO_BEBA_MODULE_PATH', __DIR__);

/**
 * Implements hook_help().
 *
 * @param string                                   $route_name
 * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
 *
 * @return string
 */
function halo_beba_api_help(string $route_name, RouteMatchInterface $route_match) {
  $output = '';

  switch ($route_name) {
    // Main module help for the halo_beba_api module.
    case 'help.page.halo_beba_api':
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Custom REST API Calls for Halo Beba application') . '</p>';
    break;

    default:
      break;
  }

  return $output;
}

/**
 * Implements hook_entity_insert().
 * Generate all image styles once an Image is uploaded.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 */
function halo_beba_api_entity_insert(EntityInterface $entity) {
  /** @var \Drupal\file\Entity\File $entity */
  if ($entity instanceof FileInterface) {
    $image = \Drupal::service('image.factory')->get($entity->getFileUri());
    /** @var \Drupal\Core\Image\Image $image */
    if ($image->isValid()) {
      $queue = \Drupal::queue('halo_beba_api_update_image_styles');
      $data = ['entity' => $entity];
      $queue->createItem($data);
    }
  }
}

/**
 * Implements hook_page_attachments().
 *
 * Adds the halo_beba_api.css-overrides library to all pages.
 *
 * @param array $page
 *
 * @see contextual_preprocess()
 */
function halo_beba_api_page_attachments(array &$page) {
  $is_anonymous = Drupal::currentUser()->isAnonymous();
  $current_path = Drupal::service('path.current')->getPath();

  if($is_anonymous && (stripos($current_path, '/webform/') === 0)) {
    $poll_id = str_ireplace('/webform/', '', $current_path);

    /** @var Webform $poll */
    $poll = Webform::load($poll_id);

    if ($poll !== NULL) {
      $category = $poll->get('category');

      switch ($category) {
        case 'Questionnaires':
          $page['#attached']['library'][] = 'halo_beba_api/halo_beba_api.css-webform-questionnaires';
        break;

        case 'Application Feedback':
          $page['#attached']['library'][] = 'halo_beba_api/halo_beba_api.css-webform-application-feedback';
        break;

        default:
        break;
      }
    }
  } elseif (stripos($current_path, '/webform-submission') === 0) {
    // add JS that is going to close WebView
    $page['#attached']['library'][] = 'halo_beba_api/halo_beba_api.js-close-webform-view';
    $page['#attached']['library'][] = 'halo_beba_api/halo_beba_api.css-webform-submission';
  } else {
    $page['#attached']['library'][] = 'halo_beba_api/halo_beba_api.css-overrides';
  }
}

/**
 * Implements hook_form_alter().
 *
 * @param array                                $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 * @param string                               $form_id
 */
function halo_beba_api_form_alter(array &$form, FormStateInterface $form_state, string $form_id) {
  $user = Drupal::currentUser();
  $roles = $user->getRoles();

  if (!in_array('administrator', $roles)) {
    switch ($form_id) {
      case 'user_register_form':
      case 'user_form':
        $form['language']['#access'] = FALSE;
      break;

      case 'taxonomy_term_categories_form':
      case 'taxonomy_term_predefined_tags_form':
      case 'taxonomy_term_keywords_form':
        $form['relations']['#access'] = FALSE;
      break;

      default:
      break;
    }
  }
}

/**
 * Implements hook_mail().
 *
 * @param string $key
 * @param array  $message
 * @param array  $params
 */
function halo_beba_api_mail(string $key, array &$message, array $params) {
  switch ($key) {
    case 'user_reset_password':
      $message['from'] = Drupal::config('system.site')->get('mail');
      $message['subject'] = $params['subject'];
      $message['body'][] = $params['message'];
    break;

    default:
    break;
  }
}

/**
 * Implements template_preprocess_page().
 *
 * @param array $variables
 */
function halo_beba_api_preprocess_page(array &$variables){
  $is_anonymous = Drupal::currentUser()->isAnonymous();
  $current_path = Drupal::service('path.current')->getPath();

  if ($is_anonymous && ((strpos($current_path, '/webform/') === 0) || (strpos($current_path, '/webform-submission') === 0))) {
    unset($variables['page']['header'], $variables['page']['breadcrumb']);
  }
}

/**
 * Implements theme_preprocess_html().
 *
 * @param array $variables
 */
function halo_beba_api_preprocess_html(array &$variables) {
  $is_anonymous = Drupal::currentUser()->isAnonymous();
  $current_path = Drupal::service('path.current')->getPath();

  if ($is_anonymous && strpos($current_path, '/webform/') === 0) {
    $viewport = [
      '#tag'        => 'meta',
      '#attributes' => [
        'name'    => 'viewport',
        'content' => 'width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0',
      ],
    ];

    $variables['page']['#attached']['html_head'][] = [$viewport, 'viewport'];
  }
}
